package hypocert

import (
	"errors"
	"fmt"
	"math"
	"math/big"
	"paillier"
	"sync"
)

//////////////////////////////////////////
// Constants and Caches

// store lagrange polynomials to avoid recalculations
var funcORCoefficientCache sync.Map
var funcXORCoefficientCache sync.Map

// set/propagate/kill wrapper used in the
// EBitsCarries protocol
type spk struct {
	s, p, k *paillier.Ciphertext
}

type BooleanFunction int

const (
	BooleanOR  BooleanFunction = iota
	BooleanXOR BooleanFunction = iota
)

//////////////////////////////////////////

// RandomMultShare returns a random encrypted integer and c*r
// in {1...Pk.N}, jointly generated by all parties
func (mpc *MPC) ERandomMultShare(c *paillier.Ciphertext) (*paillier.Ciphertext, *paillier.Ciphertext) {

	shares := make([]*paillier.Ciphertext, len(mpc.Parties))
	sharesMult := make([]*paillier.Ciphertext, len(mpc.Parties))

	var wg sync.WaitGroup

	for i := 0; i < len(mpc.Parties); i++ {

		wg.Add(1)

		go func(i int) {
			defer wg.Done()

			share, mult := mpc.Parties[i].GetRandomMultShare(c)
			shares[i] = share

			sharesMult[i] = mult
		}(i)
	}

	wg.Wait()

	shareSum := mpc.Pk.Encrypt(big.NewInt(0))
	shareMult := mpc.Pk.Encrypt(big.NewInt(0))

	for i := 0; i < len(mpc.Parties); i++ {
		shareSum = mpc.Pk.EAdd(shareSum, shares[i])
		shareMult = mpc.Pk.EAdd(shareMult, sharesMult[i])
	}

	return shareSum, shareMult
}

// RandomShare returns a random encrypted integer
// in {1...Pk.T}, jointly generated by all parties
func (mpc *MPC) ERandomShare(bound *big.Int) *paillier.Ciphertext {

	shares := make([]*paillier.Ciphertext, len(mpc.Parties))

	var wg sync.WaitGroup
	for i := 0; i < len(mpc.Parties); i++ {
		wg.Add(1)
		go func(i int) {
			defer wg.Done()
			share := mpc.Parties[i].GetRandomShare(bound)
			shares[i] = share
		}(i)
	}

	wg.Wait()

	shareSum := mpc.Pk.Encrypt(big.NewInt(0))
	for i := 0; i < len(mpc.Parties); i++ {
		shareSum = mpc.Pk.EAdd(shareSum, shares[i])
	}

	return shareSum
}

// RandomInvertibleShare returns a random encrypted integer
// in {1...Pk.T} and its inverse (mod Pk.N)
func (mpc *MPC) ERandomInvertibleShare() (*paillier.Ciphertext, *paillier.Ciphertext, error) {

	a := mpc.ERandomShare(mpc.Pk.N)
	b := mpc.ERandomShare(mpc.Pk.N)
	c := mpc.RevealInt(mpc.EMult(a, b))

	if c.Int64() == 0 {
		return nil, nil, errors.New("abort")
	}

	cInv := big.NewInt(0).ModInverse(c, mpc.Pk.N)
	aInv := mpc.Pk.ECMult(b, cInv)

	return a, aInv, nil
}

// ERandomBits returns a random bit vector from {0,1}^l
func (mpc *MPC) ERandomBits(m int) []*paillier.Ciphertext {

	vectors := make([][]*paillier.Ciphertext, len(mpc.Parties))

	var wg sync.WaitGroup

	for i := 0; i < len(mpc.Parties); i++ {
		wg.Add(1)
		go func(i int) {
			defer wg.Done()
			vec := mpc.Parties[i].GetRandomBitVector(m)
			vectors[i] = vec
		}(i)
	}

	wg.Wait()

	bits := make([]*paillier.Ciphertext, m)

	for i := 0; i < m; i++ {
		wg.Add(1)
		go func(i int) {
			defer wg.Done()

			col := make([]*paillier.Ciphertext, len(mpc.Parties))
			for k := 0; k < len(mpc.Parties); k++ {
				col[k] = vectors[k][i]
			}

			bits[i] = mpc.EBitsXOR(col)

		}(i)
	}

	wg.Wait()

	return bits
}

// solvedBits returns a random bit string from {0,1}^m and the corresponding
func (mpc *MPC) ESolvedBits(m int) ([]*paillier.Ciphertext, *paillier.Ciphertext, error) {

	bits := mpc.ERandomBits(m)

	// convert bits to an encrypted integer
	val := mpc.EBitsToEInteger(bits)

	return bits, val, nil
}

//EBitsExp returns 2^x where x = integer(bits)
func (mpc *MPC) EBitsExp(bits []*paillier.Ciphertext) *paillier.Ciphertext {

	base := big.NewInt(2)
	one := mpc.Pk.Encrypt(big.NewInt(1))
	res := mpc.Pk.Encrypt(big.NewInt(1))

	for i := 0; i < len(bits); i++ {

		pow := mpc.Pk.ECMult(bits[i], base)
		t1 := mpc.EMult(res, pow)
		t2 := mpc.EMult(mpc.Pk.ESub(one, bits[i]), one)
		t2 = mpc.EMult(t2, res)
		res = mpc.Pk.EAdd(t1, t2)
		base = base.Exp(base, big.NewInt(2), mpc.Pk.N2)
	}
	return res
}

//EBitsMult returns the bitwise sharing of a*b (note: a*b < pk.T)
func (mpc *MPC) EBitsMult(a, b []*paillier.Ciphertext) []*paillier.Ciphertext {

	length := len(a) + 1
	l2 := int(math.Floor(float64(length) / 2.0))

	resBits := make([]*paillier.Ciphertext, length)
	partialSum := make([]*paillier.Ciphertext, length)

	zero := mpc.Pk.Encrypt(big.NewInt(0))
	for i := 0; i < length; i++ {
		partialSum[i] = zero
		resBits[i] = zero
	}

	for i := l2; i >= 0; i-- {
		for k := l2; k >= 0; k-- {
			c := mpc.EMult(a[i], b[k])
			partialSum[i+k] = c
		}

		if i == l2 {
			resBits = partialSum
		} else {
			resBits = mpc.EBitsADD(resBits, partialSum)
			resBits = resBits[0:mpc.Pk.K]
		}
	}

	return resBits[0:mpc.Pk.K]

}

//EBitsToEInteger returns the integer (in Zn) representation of an encrypted binary string
func (mpc *MPC) EBitsToEInteger(bits []*paillier.Ciphertext) *paillier.Ciphertext {

	acc := mpc.Pk.Encrypt(big.NewInt(0))
	base := big.NewInt(2)
	for i := len(bits) - 1; i >= 0; i-- {
		acc = mpc.Pk.ECMult(acc, base)
		acc = mpc.Pk.EAdd(acc, bits[i])
	}
	return acc
}

//EBitsDec returns a bit representation of an integer in {0...T}
func (mpc *MPC) EBitsDec(a *paillier.Ciphertext, m int) []*paillier.Ciphertext {

	// get solved bits
	solvedBits, d, err := mpc.ESolvedBits(m)
	for err != nil {
		solvedBits, d, err = mpc.ESolvedBits(m)
	}

	bound := big.NewInt(0).Exp(big2, big.NewInt(int64(mpc.Pk.S+mpc.Pk.K+-m)), nil)
	r := mpc.ERandomShare(bound)
	r = mpc.Pk.ECMult(r, big.NewInt(0).Exp(big2, big.NewInt(int64(m)), nil))
	r = mpc.Pk.EAdd(r, d)

	max := big.NewInt(0).Exp(big2, big.NewInt(int64(2*mpc.Pk.K+mpc.Pk.S)), nil)

	// compute 2^(k + s + v) + 2^k + a - r where d is the integer returned from solvedbits
	rev := mpc.RevealInt(mpc.Pk.ESub(mpc.Pk.EAdd(a, mpc.Pk.Encrypt(max)), d))

	// only keep the m least significant bits
	rev.Mod(rev, big.NewInt(0).Exp(big2, big.NewInt(int64(m)), nil))

	revBits := mpc.EBitsBigEndian(rev, m+1)
	sumBits := mpc.EBitsADD(revBits, solvedBits)

	return sumBits[0:m]
}

// EFanInMULT efficiently computes [x,x^2,x^3...x^n] where n = len(elements)
// Note: can be used as a PrefixAND when elements are binary
func (mpc *MPC) EFanInMULT(elements []*paillier.Ciphertext) []*paillier.Ciphertext {

	n := len(elements)
	res := make([]*paillier.Ciphertext, n)
	res[0] = elements[0]

	if n == 1 {
		return res
	}

	shares := make([]*paillier.Ciphertext, n)
	sharesInv := make([]*paillier.Ciphertext, n)

	var wg sync.WaitGroup
	for i := 0; i < n; i++ {
		wg.Add(1)

		go func(i int) {
			defer wg.Done()
			var err error
			shares[i], sharesInv[i], err = mpc.ERandomInvertibleShare()
			for err != nil {
				shares[i], sharesInv[i], err = mpc.ERandomInvertibleShare()

			}
		}(i)
	}

	wg.Wait()

	d := make([]*paillier.Ciphertext, n)
	d[0] = shares[0]
	for i := 1; i < n; i++ {
		wg.Add(1)
		go func(i int) {
			defer wg.Done()
			d[i] = mpc.EMult(shares[i], sharesInv[i-1])
		}(i)

	}
	wg.Wait()

	c := make([]*big.Int, n)
	for i := 0; i < n; i++ {
		wg.Add(1)
		go func(i int) {
			defer wg.Done()
			q := mpc.EMult(d[i], elements[i])
			c[i] = mpc.RevealInt(q)
		}(i)
	}
	wg.Wait()

	acc := c[0]
	for i := 1; i < n; i++ {
		acc.Mul(acc, c[i])
		res[i] = mpc.Pk.ECMult(sharesInv[i], acc)
	}

	return res
}

func (mpc *MPC) EBitsPrefixOR(bits []*paillier.Ciphertext) []*paillier.Ciphertext {

	degree := len(bits)

	// find the nearest square to len(bits)
	lambda := int(math.Ceil(math.Sqrt(float64(len(bits)))))
	zero := mpc.Pk.Encrypt(big.NewInt(0))

	diff := lambda*lambda - len(bits)
	for i := 0; i < diff; i++ {
		bits = append(bits, zero)
	}

	var wg sync.WaitGroup
	// Compute Row wise OR of elements in A
	rowOr := make([]*paillier.Ciphertext, lambda)
	for i := 0; i < lambda; i++ {
		wg.Add(1)
		row := make([]*paillier.Ciphertext, lambda)
		for j := 0; j < lambda; j++ {
			row[j] = bits[i*lambda+j]
		}

		go func(i int, row []*paillier.Ciphertext) {
			defer wg.Done()

			res := mpc.EBitsOR(row)
			rowOr[i] = res

		}(i, row)
	}

	wg.Wait()

	// Compute ORs of Xis
	rowRes := make([]*paillier.Ciphertext, lambda)
	rowRes[0] = rowOr[0]

	wg.Add(lambda - 1)
	for n := 1; n < lambda; n++ {

		row := make([]*paillier.Ciphertext, n+1)
		for i := 0; i <= n; i++ {
			row[i] = rowOr[i]
		}

		go func(n int, row []*paillier.Ciphertext) {
			defer wg.Done()

			res := mpc.EBitsOR(row)
			rowRes[n] = res

		}(n, row)
	}

	wg.Wait()

	f := make([]*paillier.Ciphertext, lambda)
	f[0] = rowOr[0]
	for i := 1; i < lambda; i++ {
		f[i] = mpc.Pk.ESub(rowRes[i], rowRes[i-1])
	}

	g := make([]*paillier.Ciphertext, lambda)
	for j := 0; j < lambda; j++ {
		sum := zero
		for i := 0; i < lambda; i++ {
			sum = mpc.Pk.EAdd(sum, mpc.EMult(bits[i*lambda+j], f[i]))
		}
		g[j] = sum
	}

	// Compute PrefixOr of ci
	b := make([]*paillier.Ciphertext, lambda)
	b[0] = g[0]

	wg.Add(lambda - 1)
	for n := 1; n < lambda; n++ {

		row := make([]*paillier.Ciphertext, n+1)
		for i := 0; i <= n; i++ {
			row[i] = g[i]
		}

		go func(n int, row []*paillier.Ciphertext) {
			defer wg.Done()

			res := mpc.EBitsOR(row)
			b[n] = res

		}(n, row)
	}

	wg.Wait()

	s := make([]*paillier.Ciphertext, lambda)
	for i := 0; i < lambda; i++ {
		s[i] = mpc.Pk.ESub(rowRes[i], f[i])
	}

	result := make([]*paillier.Ciphertext, lambda*lambda)
	for i := 0; i < lambda; i++ {
		for j := 0; j < lambda; j++ {

			if lambda*i+j >= degree {
				break
			}

			sum := mpc.EMult(b[j], f[i])
			sum = mpc.Pk.EAdd(sum, s[i])

			res := sum

			result[i*lambda+j] = res
		}
	}

	return result[0:degree]
}

func (mpc *MPC) EBitsPrefixSPK(bits []*spk) []*spk {

	degree := len(bits)

	var wg sync.WaitGroup
	wg.Add(degree)

	res := make([]*spk, degree)
	for i := 0; i < degree; i++ {
		go func(i int) {
			defer wg.Done()

			row := make([]*spk, i+1)
			for k := 0; k <= i; k++ {
				row[k] = bits[k]
			}

			spk := mpc.EBitsSPK(row)
			res[i] = spk

		}(i)
	}

	wg.Wait()

	return res
}

// EBitsADD outputs the bitwise representation of a+b
func (mpc *MPC) EBitsADD(a, b []*paillier.Ciphertext) []*paillier.Ciphertext {

	if len(a) < len(b) {
		a = mpc.makeEqualLength(a, b)
	} else {
		b = mpc.makeEqualLength(b, a)
	}

	degree := len(a)
	carries := mpc.EBitsCarries(a, b)

	sum := make([]*paillier.Ciphertext, degree+1)
	lsb := mpc.Pk.EAdd(a[0], b[0])
	lsb = mpc.Pk.ESub(lsb, mpc.Pk.ECMult(carries[0], big.NewInt(2)))
	sum[0] = lsb
	sum[degree] = carries[degree-1]

	for i := 1; i < degree; i++ {
		sum[i] = mpc.Pk.EAdd(a[i], b[i])
		sum[i] = mpc.Pk.EAdd(sum[i], carries[i-1])
		sum[i] = mpc.Pk.ESub(sum[i], mpc.Pk.ECMult(carries[i], big.NewInt(2)))
	}

	return sum
}

// EBitsLT returns [0] if a > b, [1] otherwise
func (mpc *MPC) EBitsLT(a, b []*paillier.Ciphertext) *paillier.Ciphertext {

	if len(a) < len(b) {
		a = mpc.makeEqualLength(a, b)
	} else {
		b = mpc.makeEqualLength(b, a)
	}

	degree := len(a) // len(a) = len(b) now
	e := make([]*paillier.Ciphertext, degree)

	for i := 0; i < degree; i++ {
		d := mpc.Pk.ESub(a[i], b[i])
		d2 := mpc.EMult(d, d)
		e[degree-i-1] = d2
	}

	f := mpc.EBitsPrefixOR(e)

	g := make([]*paillier.Ciphertext, degree)
	g[0] = f[0]
	for i := degree - 1; i > 0; i-- {
		g[i] = mpc.Pk.ESub(f[i], f[i-1])
	}

	h := make([]*paillier.Ciphertext, degree)
	for i := 0; i < degree; i++ {
		h[i] = mpc.EMult(g[degree-i-1], b[i])
	}

	res := mpc.Pk.Encrypt(big.NewInt(0))

	for i := 0; i < degree; i++ {
		res = mpc.Pk.EAdd(res, h[i])
	}

	return res
}

func (mpc *MPC) EBitsCarries(a, b []*paillier.Ciphertext) []*paillier.Ciphertext {

	if len(a) < len(b) {
		a = mpc.makeEqualLength(a, b)
	} else {
		b = mpc.makeEqualLength(b, a)
	}

	one := mpc.Pk.Encrypt(big.NewInt(1))
	degree := len(a) // len(a) = len(b) now

	s := make([]*paillier.Ciphertext, degree)
	p := make([]*paillier.Ciphertext, degree)
	k := make([]*paillier.Ciphertext, degree)
	spks := make([]*spk, degree)

	for i := 0; i < degree; i++ {
		mul := mpc.EMult(a[i], b[i])
		s[i] = mul
	}

	for i := 0; i < degree; i++ {
		// compute propagate bit
		d := mpc.Pk.EAdd(a[i], b[i])
		p[i] = mpc.Pk.ESub(d, mpc.Pk.ECMult(s[i], big.NewInt(2)))

		// compute kill bit
		d = mpc.Pk.EAdd(s[i], p[i])
		k[i] = mpc.Pk.ESub(one, d)

		spks[i] = &spk{s: s[i], p: p[i], k: k[i]}
	}

	f := mpc.EBitsPrefixSPK(spks)

	res := make([]*paillier.Ciphertext, degree)

	for i := 0; i < degree; i++ {
		res[i] = f[i].s
	}

	return res
}

func (mpc *MPC) EBitsSPK(tups []*spk) *spk {

	//fmt.Println("[DEBUG]:  bitsSPK()")

	size := len(tups)

	b := tups[0].p
	for i := 1; i < size; i++ {
		b = mpc.EMult(b, tups[i].p) // equiv to AND operation
	}

	allPs := make([]*paillier.Ciphertext, size)
	for i := 0; i < size; i++ {
		allPs[i] = tups[size-i-1].p
	}

	preAnd := mpc.ReverseBits(mpc.EFanInMULT(allPs))

	carries := make([]*paillier.Ciphertext, size)
	carries[size-1] = tups[size-1].k

	var wg sync.WaitGroup
	wg.Add(size - 1)
	for i := 0; i < size-1; i++ {
		go func(i int) {
			defer wg.Done()
			mul := mpc.EMult(tups[i].k, preAnd[i+1]) // equiv to AND operation
			carries[i] = mul
		}(i)
	}

	wg.Wait()

	zero := mpc.Pk.Encrypt(big.NewInt(0))
	one := mpc.Pk.Encrypt(big.NewInt(1))

	sum := zero
	for i := 0; i < size; i++ {
		sum = mpc.Pk.EAdd(sum, carries[i])
	}

	diff := mpc.Pk.EAdd(b, sum)
	a := mpc.Pk.ESub(one, diff)

	return &spk{s: a, p: b, k: sum}
}

func (mpc *MPC) ReverseBits(bits []*paillier.Ciphertext) []*paillier.Ciphertext {

	size := len(bits)
	bitsR := make([]*paillier.Ciphertext, size)
	for i := 0; i < size; i++ {
		bitsR[size-i-1] = bits[i]
	}

	return bitsR
}

// EBitsBigEndian returns the n-bit (encrypted) representation of an integer a
func (mpc *MPC) EBitsBigEndian(a *big.Int, n int) []*paillier.Ciphertext {

	s := fmt.Sprintf("%b", a)
	bits := make([]*paillier.Ciphertext, len(s))
	k := 0
	for i := len(s) - 1; i >= 0; i-- {
		bits[k] = mpc.Pk.Encrypt(big.NewInt(int64(s[i] - '0')))
		k++
	}

	zero := mpc.Pk.Encrypt(big.NewInt(0))
	for i := n - len(s) - 1; i >= 0; i-- {
		bits = append(bits, zero)
	}

	return bits
}

// EBitsZero returns the n-bit vector of zeros
func (mpc *MPC) EBitsZero() []*paillier.Ciphertext {

	n := mpc.Pk.K
	bits := make([]*paillier.Ciphertext, n)
	zero := mpc.Pk.Encrypt(big.NewInt(0))

	for i := 0; i < n; i++ {
		bits[i] = zero
	}

	return bits
}

func (mpc *MPC) symmetricBooleanFunction(bits []*paillier.Ciphertext, f BooleanFunction) *paillier.Ciphertext {

	n := len(bits)

	sum := mpc.Pk.Encrypt(big.NewInt(1))
	for i := 0; i < n; i++ {
		sum = mpc.Pk.EAdd(sum, bits[i])
	}

	a := make([]*paillier.Ciphertext, n+1)
	for i := 0; i <= n; i++ {
		a[i] = sum
	}

	mul := mpc.EFanInMULT(a)

	var poly []*big.Int
	if f == BooleanOR {
		poly = funcORInterpolation(n, mpc.Pk.N)
	} else if f == BooleanXOR {
		poly = funcXORInterpolation(n, mpc.Pk.N)
	}

	res := mpc.Pk.Encrypt(poly[n])
	for i := 1; i <= n; i++ {
		c := mpc.Pk.ECMult(mul[i-1], poly[n-i])
		res = mpc.Pk.EAdd(res, c)
	}

	return res
}

// EBitsXOR computes the XOR of all the bits
func (mpc *MPC) EBitsXOR(bits []*paillier.Ciphertext) *paillier.Ciphertext {
	return mpc.symmetricBooleanFunction(bits, BooleanXOR)
}

// EBitsNOT returns the encryption of !b
func (mpc *MPC) EBitNOT(b *paillier.Ciphertext) *paillier.Ciphertext {
	return mpc.Pk.ESub(mpc.Pk.Encrypt(big.NewInt(1)), b)
}

// EBitsOR computes the OR of all the bits
func (mpc *MPC) EBitsOR(bits []*paillier.Ciphertext) *paillier.Ciphertext {
	return mpc.symmetricBooleanFunction(bits, BooleanOR)
}

// EBitsAND computes the AND of all the bits
func (mpc *MPC) EBitsAND(bits []*paillier.Ciphertext) *paillier.Ciphertext {

	degree := len(bits)

	res := bits[0]
	for i := 1; i < degree; i++ {
		res = mpc.EMult(res, bits[i])
	}

	return res
}

func (mpc *MPC) makeEqualLength(a, b []*paillier.Ciphertext) []*paillier.Ciphertext {
	zero := mpc.Pk.Encrypt(big.NewInt(0))
	delta := len(b) - len(a)
	zeroArray := make([]*paillier.Ciphertext, delta)
	for i := 0; i < delta; i++ {
		zeroArray[i] = zero
	}

	return append(a, zeroArray...)
}
